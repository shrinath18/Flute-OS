Q).What happens When you press the power button of your PC?
A).The pressing of power button will send signal to the motherboard through the connecting wires.The motherboard forwards this signal to Power Supply Unit(PSU). PSU is responsible to provide DC current to the internal parts of the computer. After the internal tests are carried out and the output is stabilized PSU sends power good signal into motherboard to BIOS. BIOS then initiates a process called POST(Power On Self Test) Which ensures that all the devices all in working condition and then loads the BIOS firmware code at a particular memory address and starts executing the loaded code.
References:
http://www.dewassoc.com/kbase/hard_drives/master_boot_record.htm 

Q)What is the main function of BOIS firmware code?
A)One of the main functions of the BIOS firmware code is to look for a bootable device and run the bootloader code.


Q)How does the BIOS identify which is a bootable device and load the intital code?
A).Disks:Each disk has something called MBR of 512 bytes at the first sector of the device.The first 446 bytes contain the bootloader code and after that there are 4 partition table entries each of 16 bytes each followed by the boot signature.The value of the first byte of each partition table entry indicates whether that partition is bootable or not. If the value is 0x80 it is bootable, and if the value is 0x00 then it is not.(Partitions are logical sections on the same physical disk).Along with this the 511,512 byte of MBR contain the values 0x55 and 0xAA as the boot signature for the physical disk.If the BOIS finds that this drive is bootable then it loads the MBR into memory and starts excuting the code (this will put the address of first byte of the loaded MBR into the Instruction pointer register).
CD-ROM:To boot from CD-ROM the BIOS must support el-torito CD-ROM specification.El-torito is an extension of ISO-9960 specification for CD-ROM.ISO-9960 is a file system specification which tells how the data is stored in the optical medium.On a high level it consists of 2 parts: System area : The first 32,768 bytes of the disk(which is unused) and the Data Part.The data part starts with set of one or more volume descriptors which describe the remaining part of the data on the disk.ISO-9660 defines that a “Primary Volume Descriptor” must reside at sector 0x10 (16 decimal), relative to the start of the session, followed by any number of other Volume Descriptors, followed by a “Volume Descriptor Set Terminator".The El Torito Bootable CD Specification builds on this format by requiring a “Boot Record” Volume Descriptor(The first byte of the boot record must be 0 if you want the volume descriptor to be recognised as a boot volume descriptor)  at the sector 0x11(17) which contains the absolute pointer to the Boot Catalog.Boot Catalog consists of 5 entries, the second entry(called default entry) which contains a pointer to the first sector of the boot image to load and also the number of sectors,where to load the sectors in the memory among other things.So if the BOIS supports El-torito it knows how to boot the image.

References: 
https://mtomassoli.wordpress.com/2009/02/27/boot-your-os-from-cddvd/
El-torito.pdf in the references directory or (https://www.google.co.in/url?sa=t&rct=j&q=&esrc=s&source=web&cd=5&cad=rja&uact=8&ved=0ahUKEwiI99GmtsXNAhVIE5QKHfZ9CsoQFgg7MAQ&url=http%3A%2F%2Fbochs.sourceforge.net%2Ftechspec%2Fel-torito.pdf.gz&usg=AFQjCNHfmElrgyV8FAPY-jLsyHGTxU1UGA)

Q)What is multi-boot specification and how is it beneficial?
A)Multi-boot specification specifies an interface between a boot loader and a operating system, such that any complying boot loader should be able to load any complying operating system. This specification does not specify how boot loaders should work — only how they must interface with the operating system being loaded.The specification decouples the bootloader code and the OS code.Also it simplifies the bootloader code as it will no longer need to understand the numerous executable formats of OS and the OS will no longer need to do all the stuff required to put itself in protected mode.

Q).How does Multi-boot specification work?
A).The spec says that the the compliant OS must contain a 32 bit magic multi-boot header within the first 8192 bytes of the OS image which contain numerous address fields among others. which tell the bootloader which physical address to jump to to start the OS execution,physical address of the end of data segment,physical address of the end of bss segment,starting address of the text segment etc.This simplies a lot of bootloader code as it no longer needs to know what format the OS is. It will just read the multi-boot header and figure out where to start the execution of the OS code.
The bootloader should create the following snapshot of the system at the ponit of running the OS code is :

  EAX - Magic Number. Must be 0x2BADB002. This will indicate to the kernel that the boot loader is multiboot standard
  EBX - Containes the physical address of the Multiboot information structure(which contains info like the lower memory address,higher memory address, bootdevice etc)
  CS - Must be a 32-bit read/execute code segment with an offset of `0' and a limit of `0xFFFFFFFF'. The exact value is undefined.
  DS,ES,FS,GS,SS - Must be a 32-bit read/write data segment with an offset of `0' and a limit of `0xFFFFFFFF'. The exact values are   all undefined.
  A20 gate must be enabled
  CR0 - Bit 31 (PG) bit must be cleared (paging disabled) and Bit 0 (PE) bit must be set (Protected Mode enabled). Other bits undefined.

References:
https://www.gnu.org/software/grub/manual/multiboot/multiboot.pdf

Q)How does it all fit-together in our project?
A).We will use GRUB as the bootloader.GRUB is a multi-boot compliant bootloader which means it will do all the hard work of loading the OS image in the memory,putting the system protected mode, passing the multiboot information structure to our kernel etc.Our OS will also be multiboot compliant so we set the necessary multi-boot header in the boot.s file.The C kernel is present in the main.c file.We use linker to generate the OS image in the elf format.(See Makefile..Since the OS is multiboot compliant It does not matter what executable format out OS is because the GRUB will find out what intructions to execute based on the multiboot header).GRUB should know which is the kernel image(there can be multiple files on the CD/disk).This is specified as kernel entry in the menu.lst file.We will be booting our OS from CD ROM.GRUB provides a file called stage2_eltorito which will act as the boot image for the initial bootloader code loaded by the BIOS.Now to generate a el-torito CD image we will use a utility called genisoimage(See Makefile).The options of the genisoimage correspond to the some of the data in the default entry of the Boot Catalog.(See el-torito.pdf).
So when the system boots,the BIOS sees that we need to boot from CD(check the bochs config file).It checks for the Boot Record at sector 0x11 on the CD which contains the pointer to the Boot Catalog.The boot catalog contains the pointer to where the stage2_eltorito image is located on the CD-ROM and it loads the sectors sepcified at the specified memory location.This is out GRUB's bootloader code,this code will know what file is the kernel image by reading the menu.lst file and also create the multiboot compliant snapshot of the system before executing the OS code. 











